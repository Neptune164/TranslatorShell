using Dalamud.Bindings.ImGui; using Dalamud.Configuration; using Dalamud.Interface; using Dalamud.Interface.Utility.Raii; using Dalamud.Interface.Windowing; using Dalamud.Logging; using Dalamud.Plugin.Services; using System; using System.Collections.Generic; using System.Numerics; using TranslatorShell;   public class TranslationOverlay : Window {     private readonly Plugin plugin;     private string? currentText = null; 	public TranslationOverlay(Plugin plugin)         :base("TranslationOverlay##Hidden") 	{         this.plugin = plugin ?? throw new ArgumentNullException(nameof(plugin));          Flags = ImGuiWindowFlags.NoTitleBar                  | ImGuiWindowFlags.NoScrollbar                | ImGuiWindowFlags.NoCollapse                | ImGuiWindowFlags.NoBackground; 
        // set the minimal and maximum size of the overlay         SizeConstraints = new WindowSizeConstraints         {             MinimumSize = new Vector2(200, 100),             MaximumSize = new Vector2(800, 600)         };     }     // display translations on the overlay     public void SetText(string text)     {         if (!plugin.Configuration.EnableOverlay)             return;              currentText = text;             IsOpen = true;              }     // clear the old version and close the overlay     public void Clear()     {         currentText = null;         IsOpen = false;     }     // for user to decide whether open the overlay or not     public void OnConfigChanged()     {         if (!plugin.Configuration.EnableOverlay)             IsOpen = false;         else if (!string.IsNullOrEmpty(currentText))             IsOpen = true;     }      public override void Draw()     {         if (!plugin.Configuration.EnableOverlay)          {             IsOpen = false;             return;         }          if (string.IsNullOrEmpty(currentText))             return;
         // add a button to close the overlay         ImGui.SameLine(ImGui.GetWindowContentRegionMax().X - 20);         if (ImGui.SmallButton("x"))         {             IsOpen = false;             return;         } 
        // set a child window to automately          ImGui.SetWindowFontScale(plugin.Configuration.OverlayFontScale);          if(ImGui.BeginChild("##TranslationScroll",new Vector2(0, -5),false))         {             using (ImRaii.PushFont(UiBuilder.DefaultFont))             {                  ImGui.TextWrapped(currentText ?? string.Empty);              }         }         ImGui.EndChild();         ImGui.SetWindowFontScale(1.0f);     } } 